import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

class CleanData:
    def __init__(self, start, end):
        
        self.start = start
        self.end = end
        
        self.df = pd.read_csv('/home/harryj/Documents/RSA/Data/cripps20112014.csv')
        self.df['date'] = pd.Series([pd.to_datetime(date) for date in self.df['date']])
        self.df = self.df.set_index(['date'])

    def cleandata(self):

        idx = pd.date_range(self.start, self.end, periods=None, freq='D')
        self.df = self.df.reindex(idx)
        self.df = self.df.fillna(method='pad')
        return self.df

class Prediction:

    def __init__(self, X, Y):
        self.X = X
        self.Y = Y

        # data directory
        self.DATA = '/home/harryj/Documents/RSA/Data/cripps20112014.csv'

        # Define sum weightings as constants
        self.LastValueW = 0.001913372
        self.Week1W = 0.0255509727
        self.Year1W = 0.00966464649
        self.Year2W = 0.007528915
        self.MaW = 0.883648789

        # define moving average length
        self.ma_length = 52

        # import csv
        self.df = pd.read_csv(self.DATA)
        self.df['predictedvalue'] = np.nan
        self.df['error'] = np.nan

    # define prediction function
    def predict(self):

        targetpos = self.X

        while targetpos <= self.Y:

            actualvalue = self.df['value'][targetpos]
            lastvalue = targetpos - 1
            ma_start = lastvalue - self.ma_length
            comp1week = targetpos - 2
            comp1year = targetpos - 52
            comp2year = targetpos - 104
            comp_ma = np.mean(self.df['value'][ma_start:lastvalue])

            predicted = self.df['value'][lastvalue] * self.LastValueW + self.df['value'][comp1week] * self.Week1W + self.df['value'][comp1year] * self.Year1W + self.df['value'][comp2year] * self.Year2W + comp_ma * self.MaW

            self.df['predictedvalue'][targetpos] = predicted

            self.error = (predicted - actualvalue)/(actualvalue)

            self.df['error'][targetpos] = self.error

            targetpos += 1

        return self.df[['predictedvalue','error']][self.X:self.Y]


def plot():
    plt.plot(p124.predict().index, p124.predict()['predictedvalue'])
    plt.plot(p124.predict().index, p124.predict()['error'])
    plt.xlabel('date')
    plt.ylabel('value')
    plt.title('RSA: Predicted Cripps Pink Apples against actual Cripps Pink Apples')
    plt.show()

p = CleanData('07/01/2011', '31/12/2014')
print p.cleandata()
p124 = Prediction(124,176)
print p124.predict()
